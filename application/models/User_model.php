<?php
defined('BASEPATH') OR exit('No direct script access allowed');

class User_model extends CI_Model {
    public function __construct() {
        parent::__construct();
        $this->load->database();
    }

    // Ensure the USERS table exists and is initialized
    public function ensure_users_table() {
        // Step 1: Check if the USERS table exists
        if (!$this->table_exists('USERS')) {
            // Step 2: Create the USERS table
            $this->create_users_table();
        }

        // Step 3: Check if the USERS table has data
        if ($this->is_table_empty('USERS')) {
            // Step 4: Insert default admin user
            $this->insert_admin_user();
        }
    }

    // Check if a table exists in the database
    private function table_exists($table_name) {
        $query = $this->db->query("
            SELECT 1 
            FROM RDB\$RELATIONS 
            WHERE RDB\$RELATION_NAME = ?
        ", [strtoupper($table_name)]);
        return $query->num_rows() > 0;
    }
    

    // Create the USERS table
    private function create_users_table() {
        $query = "
            CREATE TABLE USERS (
                ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                USER_ROLE VARCHAR(50), -- For User role
                USERNAME VARCHAR(255) NOT NULL,
                COMPANYNAME VARCHAR(255) UNIQUE,
                PASSWORD VARCHAR(255) NOT NULL,
                EMAIL VARCHAR(255) UNIQUE, -- Email address
                CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- Timestamp for account creation
            )
        ";
        $this->db->query($query);
    }
    

    // Check if a table is empty
    private function is_table_empty($table_name) {
        $query = $this->db->get($table_name);
        return $query->num_rows() === 0;
    }

    // Insert default admin user
    private function insert_admin_user() {
        $hashed_password = password_hash('admin', PASSWORD_DEFAULT);
        
        // Default user with username and password
        $this->db->insert('USERS', [
            'USERNAME' => 'admin',
            'PASSWORD' => $hashed_password,
            'EMAIL' => null, // No email for this user
            'USER_ROLE' => 'admin'
        ]);
    }
    
    // Validate user credentials
    public function validate_user($username, $password) {
        $this->db->where("USERNAME", $username);
        $query = $this->db->get("USERS");
    
        if ($query->num_rows() === 1) {
            $user = $query->row();
    
            // Use password_verify to compare the input password with the hashed password
            if (password_verify($password, $user->PASSWORD)) {
                return $user;
            }
        }  
        return false;
    }

    public function reset_password($username, $password) {
        // Hash the new password
        $hashed_password = password_hash($password, PASSWORD_DEFAULT);
    
        // Update the user's password
        $this->db->where('USERNAME', $username);
        return $this->db->update('USERS', ['PASSWORD' => $hashed_password]);
    }
    
    
    public function create_user($data) {
        // Check if the username or email already exists
        $this->db->where('USERNAME', $data['USERNAME']);
       
        $query = $this->db->get('USERS');
    
        if ($query->num_rows() > 0) {
            // User already exists
            return false;
        }
    
        // Insert the new user into the database
        return $this->db->insert('USERS', $data);
    }    
}
